import bcrypt from 'bcryptjs';
import express from 'express';
import expressAsyncHandler from 'express-async-handler';
import User from '../models/userModel.js';
import { generateToken, isAuth } from '../utils.js';

const userRouter = express.Router();

userRouter.post(
  '/signin',
  expressAsyncHandler(async (req, res) => {
    const { email, password } = req.body;

    // Check if both email and password are provided
    if (!email || !password) {
      return res
        .status(400)
        .send({ message: 'Email and password are required' });
    }

    // Find the user by email (await is needed)
    const user = await User.findOne({ email });

    // If user is found, check the password
    if (user) {
      if (bcrypt.compareSync(password, user.password)) {
        // Password matches, send user details along with token
        res.send({
          _id: user._id,
          name: user.name,
          email: user.email,
          isAdmin: user.isAdmin,
          token: generateToken(user),
        });
        return;
      } else {
        // If password doesn't match, send 401 error
        return res.status(401).send({ message: 'Password is incorrect' });
      }
    }

    // If user is not found, send 401 error
    res.status(401).send({ message: 'Incorrect Email or Password' });
  })
);

userRouter.post(
    '/signup',
    expressAsyncHandler(async(req,res)=>{

        try{
            const newUser = new User({
              name: req.body.name,
              email: req.body.email,
              password: bcrypt.hashSync(req.body.password),
            });
            const user = await newUser.save();
            res.send({
              _id: user._id,
              name: user.name,
              email: user.email,
              isAdmin: user.isAdmin,
              token: generateToken(user),
            });
            return;
        }catch(err){
            res.status(409).send({message:"Email Already Exist"})
        }

    //     const userExist=await User.findOne({email: req.body.email});

    //     if(!userExist){

    //     const newUser =new User({
    //         name:req.body.name,
    //         email: req.body.email,
    //         password: bcrypt.hashSync(req.body.password)
    //     });
    //     const user=await newUser.save();
    //     res.send({
    //       _id: user._id,
    //       name: user.name,
    //       email: user.email,
    //       isAdmin: user.isAdmin,
    //       token: generateToken(user),
    //     });
    //     return;
    // }
    // else{
    //     return res.status(409).send({message: "Email Already Exist"})
    // }

    })
 );

//  for profile
 userRouter.put(
   '/profile',
   isAuth,
   expressAsyncHandler(async (req, res) => {
    const user= await User.findById(req.user._id);
        if(user){
            user.name=req.body.name || user.name;
            user.email=req.body.email || user.email;

            if(req.body.password){
                
                user.password=bcrypt.hashSync(req.body.password,8)
            }

            const updateUser= await user.save();

            res.send({
              _id: updateUser._id,
              name: updateUser.name,
              email: updateUser.email,
              isAdmin: updateUser.isAdmin,
              token: generateToken(updateUser),
            });
        }
        else{
            res.status(401).send({message:"User does not exist"})
        }

   })
 );

export default userRouter;

// if (!user) {
//   return res.status(401).send({ message: 'User not found' });
// }
// const isMatch = bcrypt.compareSync(password, user.password);
// if (!isMatch) {
//   return res.status(401).send({ message: 'Invalid password' });
// }
// res.send({
//   _id: user._id,
//   name: user.name,
//   email: user.email,
//   isAdmin: user.isAdmin,
//   token: generateToken(user),
// });
